/**
 * search.js - Simple search system for Poliția Locală Slobozia website
 * This file implements a client-side search system that can be later replaced with a backend implementation
 */

// Sample search index - in a real implementation, this would be generated by a backend system
// that crawls all pages and documents on the site
const searchIndex = {
    // Main pages
    "acasa": {
        url: "/pls/",
        title: "Acasă - Poliția Locală Slobozia",
        content: "Pagina principală a Poliției Locale Slobozia. Informații despre serviciile oferite, noutăți și evenimente recente.",
        keywords: ["politia locala", "slobozia", "siguranta publica", "ordine publica"],
        type: "page",
        importance: 10
    },
    "despre-noi": {
        url: "/pls/despre-noi",
        title: "Despre Noi - Poliția Locală Slobozia",
        content: "Informații generale despre Poliția Locală Slobozia, istoric, misiune, viziune și valori. Structura organizatorică și principalele atribuții.",
        keywords: ["despre", "misiune", "viziune", "valori", "structura", "organizare", "istoric"],
        type: "page",
        importance: 9
    },
    "gdpr": {
        url: "/pls/gdpr",
        title: "GDPR - Poliția Locală Slobozia",
        content: "Informații despre conformitatea cu Regulamentul General privind Protecția Datelor (GDPR). Politica de confidențialitate și prelucrare a datelor cu caracter personal.",
        keywords: ["gdpr", "protectia datelor", "confidentialitate", "date personale", "regulament"],
        type: "page",
        importance: 8
    },
    "contact": {
        url: "/pls/contact",
        title: "Contact - Poliția Locală Slobozia",
        content: "Date de contact ale Poliției Locale Slobozia. Adresă, numere de telefon, email, program de funcționare și harta locației.",
        keywords: ["contact", "adresa", "telefon", "email", "program", "harta"],
        type: "page",
        importance: 9
    },
    "petitii": {
        url: "/pls/petitii",
        title: "Petiții - Poliția Locală Slobozia",
        content: "Informații despre depunerea și procesarea petițiilor, reclamațiilor și sesizărilor. Formular online pentru depunerea petițiilor.",
        keywords: ["petitii", "reclamatii", "sesizari", "formular", "plangeri"],
        type: "page",
        importance: 8
    },
    "cariere": {
        url: "/pls/cariere",
        title: "Cariere - Poliția Locală Slobozia",
        content: "Oportunități de carieră în cadrul Poliției Locale Slobozia. Posturi vacante, condiții de participare la concursuri și etapele procesului de recrutare.",
        keywords: ["cariere", "job", "angajare", "recrutare", "concurs", "posturi vacante"],
        type: "page",
        importance: 7
    },
    
    // Documents
    "og-43-1997": {
        url: "/pls/documente/og-43-1997",
        title: "O.G. nr. 43/1997 privind regimul drumurilor",
        content: "Ordonanța Guvernului nr. 43/1997 privind regimul drumurilor, republicată, cu modificările și completările ulterioare. Document legislativ important pentru activitatea poliției locale.",
        keywords: ["og 43", "og 43/1997", "ordonanta", "regimul drumurilor", "legislatie", "documente"],
        type: "document",
        importance: 7
    },
    "legea-155-2010": {
        url: "/pls/documente/legea-155-2010",
        title: "Legea nr. 155/2010 a poliției locale",
        content: "Legea nr. 155/2010 a poliției locale, republicată, cu modificările și completările ulterioare. Cadrul legal de organizare și funcționare a poliției locale.",
        keywords: ["legea 155", "legea 155/2010", "politia locala", "lege", "legislatie", "documente"],
        type: "document",
        importance: 9
    },
    "hcl-1-2011": {
        url: "/pls/documente/hcl-1-2011",
        title: "HCL nr. 1/2011 privind înființarea Poliției Locale Slobozia",
        content: "Hotărârea Consiliului Local nr. 1/2011 privind înființarea Poliției Locale Slobozia ca serviciu public local, cu personalitate juridică.",
        keywords: ["hcl 1", "hcl 1/2011", "hotarare", "infiintare", "consiliu local", "documente"],
        type: "document", 
        importance: 8
    },
    
    // Additional pages
    "acte-normative": {
        url: "/pls/acte-normative",
        title: "Acte Normative - Poliția Locală Slobozia",
        content: "Lista actelor normative care reglementează organizarea și funcționarea Poliției Locale Slobozia. Legi, ordonanțe, hotărâri și alte documente relevante.",
        keywords: ["acte normative", "legi", "ordonante", "hotarari", "legislatie"],
        type: "page",
        importance: 7
    },
    "atributii": {
        url: "/pls/atributii",
        title: "Atribuții - Poliția Locală Slobozia",
        content: "Atribuțiile Poliției Locale Slobozia conform legii. Competențe în domeniul ordinii publice, circulației, mediului, comerțului și construcțiilor.",
        keywords: ["atributii", "competente", "ordine publica", "circulatie", "mediu", "comert"],
        type: "page",
        importance: 8
    },
    "conducere": {
        url: "/pls/conducere",
        title: "Conducere - Poliția Locală Slobozia",
        content: "Prezentarea echipei de conducere a Poliției Locale Slobozia. Director executiv, directori adjuncți și șefi de servicii.",
        keywords: ["conducere", "director", "management", "echipa", "leadership"],
        type: "page",
        importance: 7
    }
};

// Function to perform the search
function performServerSearch(query, page = 1, perPage = 10) {
    // Normalize the query (lowercase, trim)
    const normalizedQuery = query.toLowerCase().trim();
    
    // Split the query into words for better matching
    const queryWords = normalizedQuery.split(/\s+/);
    
    // Array to store search results with relevance scores
    const searchResults = [];
    
    // Process each item in our index
    for (const key in searchIndex) {
        const item = searchIndex[key];
        let score = 0;
        let matchDetails = [];
        
        // Check for exact title match (highest priority)
        if (item.title.toLowerCase().includes(normalizedQuery)) {
            score += 100;
            matchDetails.push("Titlu exact");
        }
        
        // Check for exact matches in URL - good for direct references
        if (item.url.toLowerCase().includes(normalizedQuery)) {
            score += 90;
            matchDetails.push("URL exact");
        }
        
        // Check keywords for exact matches
        if (item.keywords.some(keyword => keyword.toLowerCase() === normalizedQuery)) {
            score += 80;
            matchDetails.push("Cuvânt cheie exact");
        }
        
        // Check for partial matches in keywords
        item.keywords.forEach(keyword => {
            if (keyword.toLowerCase().includes(normalizedQuery)) {
                score += 60;
                matchDetails.push(`Cuvânt cheie: ${keyword}`);
            }
            
            // Check if any query word matches parts of keywords
            queryWords.forEach(word => {
                if (word.length > 2 && keyword.toLowerCase().includes(word)) {
                    score += 40;
                    matchDetails.push(`Cuvânt cheie parțial: ${keyword}`);
                }
            });
        });
        
        // Check content for exact matches
        if (item.content.toLowerCase().includes(normalizedQuery)) {
            score += 50;
            matchDetails.push("Conținut exact");
            
            // Add excerpt
            const contentLower = item.content.toLowerCase();
            const index = contentLower.indexOf(normalizedQuery);
            const start = Math.max(0, index - 50);
            const end = Math.min(contentLower.length, index + normalizedQuery.length + 50);
            const excerpt = item.content.substring(start, end);
            item.excerpt = "..." + excerpt + "...";
        }
        
        // Check content for partial matches
        queryWords.forEach(word => {
            if (word.length > 2 && item.content.toLowerCase().includes(word)) {
                score += 30;
                matchDetails.push(`Conținut parțial: '${word}'`);
                
                // If we haven't already set an excerpt from an exact match
                if (!item.excerpt) {
                    const contentLower = item.content.toLowerCase();
                    const index = contentLower.indexOf(word);
                    const start = Math.max(0, index - 40);
                    const end = Math.min(contentLower.length, index + word.length + 40);
                    const excerpt = item.content.substring(start, end);
                    item.excerpt = "..." + excerpt + "...";
                }
            }
        });
        
        // Add document type and importance bonuses
        if (item.type === "document") {
            // Add bonus for document searches that look like document references
            if (/^[a-z]+\.?\s*\d+\s*\/\s*\d{4}$/i.test(normalizedQuery)) {
                score += 150;
                matchDetails.push("Format document");
            }
        }
        
        // Add the base importance score
        score += item.importance * 5;
        
        // If we have any match, add this item to results
        if (score > 0) {
            searchResults.push({
                ...item,
                score: score,
                matchDetails: matchDetails
            });
        }
    }
    
    // Sort results by score (descending)
    searchResults.sort((a, b) => b.score - a.score);
    
    // Calculate pagination
    const totalResults = searchResults.length;
    const totalPages = Math.ceil(totalResults / perPage);
    const startIndex = (page - 1) * perPage;
    const endIndex = Math.min(startIndex + perPage, totalResults);
    const paginatedResults = searchResults.slice(startIndex, endIndex);
    
    // Return search results with pagination info
    return {
        query: query,
        totalResults: totalResults,
        currentPage: page,
        totalPages: totalPages,
        perPage: perPage,
        results: paginatedResults,
        // If we have an exact match with very high score, suggest direct navigation
        directMatch: searchResults.length > 0 && searchResults[0].score > 200 ? searchResults[0] : null
    };
}

// Function to highlight the search terms in a text
function highlightSearchTerms(text, query) {
    if (!text || !query) return text;
    
    // Normalize the query
    const normalizedQuery = query.toLowerCase().trim();
    
    // Split into words for partial matches
    const queryWords = normalizedQuery.split(/\s+/).filter(word => word.length > 2);
    
    // Copy the original text
    let highlightedText = text;
    
    // First try to highlight the full query
    if (text.toLowerCase().includes(normalizedQuery)) {
        const regex = new RegExp(normalizedQuery, 'gi');
        highlightedText = highlightedText.replace(regex, match => `<span class="search-highlight">${match}</span>`);
    } else {
        // If full query not found, highlight individual words
        queryWords.forEach(word => {
            const regex = new RegExp(word, 'gi');
            highlightedText = highlightedText.replace(regex, match => `<span class="search-highlight">${match}</span>`);
        });
    }
    
    return highlightedText;
}

// Expose these functions globally
window.siteSearch = {
    performSearch: performServerSearch,
    highlightSearchTerms: highlightSearchTerms
};
